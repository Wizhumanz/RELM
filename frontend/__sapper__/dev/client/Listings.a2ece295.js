import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, E as validate_each_argument, v as validate_slots, u as create_component, w as claim_component, x as mount_component, A as transition_in, B as transition_out, C as destroy_component, e as element, b as space, t as text, c as claim_element, f as children, h as detach_dev, j as claim_space, g as claim_text, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, p as listen_dev, F as check_outros, G as destroy_each, r as run_all, H as group_outros } from './client.5763adf5.js';
import ListingLI_1 from './ListingLI.95fd40fe.js';
import AddListing from './AddListing.39d9da04.js';

/* src/routes/Listings.svelte generated by Svelte v3.35.0 */
const file = "src/routes/Listings.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (15:4) {#if id && id !== ""}
function create_if_block_3(ctx) {
	let addlisting;
	let current;
	addlisting = new AddListing({ $$inline: true });

	const block = {
		c: function create() {
			create_component(addlisting.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(addlisting.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(addlisting, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(addlisting.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(addlisting.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(addlisting, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(15:4) {#if id && id !== \\\"\\\"}",
		ctx
	});

	return block;
}

// (21:4) {:else}
function create_else_block(ctx) {
	let h1;
	let t;

	const block = {
		c: function create() {
			h1 = element("h1");
			t = text("Public Listings");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t = claim_text(h1_nodes, "Public Listings");
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-1o6e2u4");
			add_location(h1, file, 21, 8, 462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(21:4) {:else}",
		ctx
	});

	return block;
}

// (19:4) {#if id && id !== ""}
function create_if_block_2(ctx) {
	let h1;
	let t;

	const block = {
		c: function create() {
			h1 = element("h1");
			t = text("All Listings");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t = claim_text(h1_nodes, "All Listings");
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-1o6e2u4");
			add_location(h1, file, 19, 8, 420);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(19:4) {#if id && id !== \\\"\\\"}",
		ctx
	});

	return block;
}

// (91:4) {#if id && id !== ""}
function create_if_block_1(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let ul;
	let li0;
	let t2;
	let t3;
	let li1;
	let t4;
	let t5;
	let li2;
	let t6;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			ul = element("ul");
			li0 = element("li");
			t2 = text("Public");
			t3 = space();
			li1 = element("li");
			t4 = text("Complete");
			t5 = space();
			li2 = element("li");
			t6 = text("Check");
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			children(div1).forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			ul = claim_element(div2_nodes, "UL", { id: true, class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			t2 = claim_text(li0_nodes, "Public");
			li0_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			t4 = claim_text(li1_nodes, "Complete");
			li1_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			t6 = claim_text(li2_nodes, "Check");
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "col-2");
			add_location(div0, file, 92, 12, 2745);
			attr_dev(div1, "class", "col-7");
			add_location(div1, file, 93, 12, 2779);
			attr_dev(li0, "class", "svelte-1o6e2u4");
			add_location(li0, file, 96, 20, 2896);
			attr_dev(li1, "class", "svelte-1o6e2u4");
			add_location(li1, file, 97, 20, 2932);
			attr_dev(li2, "class", "svelte-1o6e2u4");
			add_location(li2, file, 98, 20, 2970);
			attr_dev(ul, "id", "checkbox-headers");
			attr_dev(ul, "class", "svelte-1o6e2u4");
			add_location(ul, file, 95, 16, 2849);
			attr_dev(div2, "class", "col-3");
			add_location(div2, file, 94, 12, 2813);
			attr_dev(div3, "class", "row");
			add_location(div3, file, 91, 8, 2715);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div2, ul);
			append_dev(ul, li0);
			append_dev(li0, t2);
			append_dev(ul, t3);
			append_dev(ul, li1);
			append_dev(li1, t4);
			append_dev(ul, t5);
			append_dev(ul, li2);
			append_dev(li2, t6);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(91:4) {#if id && id !== \\\"\\\"}",
		ctx
	});

	return block;
}

// (105:4) {#each listings as l}
function create_each_block(ctx) {
	let listingli;
	let current;

	listingli = new ListingLI_1({
			props: {
				id: /*id*/ ctx[0],
				listing: /*l*/ ctx[10]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(listingli.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(listingli.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(listingli, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const listingli_changes = {};
			if (dirty & /*id*/ 1) listingli_changes.id = /*id*/ ctx[0];
			if (dirty & /*listings*/ 2) listingli_changes.listing = /*l*/ ctx[10];
			listingli.$set(listingli_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(listingli.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(listingli.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(listingli, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(105:4) {#each listings as l}",
		ctx
	});

	return block;
}

// (109:4) {#if id && id !== ""}
function create_if_block(ctx) {
	let button;
	let t;

	const block = {
		c: function create() {
			button = element("button");
			t = text("Update Listings");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Update Listings");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-1o6e2u4");
			add_location(button, file, 109, 8, 3164);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(109:4) {#if id && id !== \\\"\\\"}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div6;
	let t0;
	let t1;
	let div5;
	let a;
	let t2;
	let i;
	let t3;
	let div4;
	let h40;
	let t4;
	let t5;
	let div0;
	let input0;
	let t6;
	let label0;
	let t7;
	let t8;
	let div1;
	let input1;
	let t9;
	let label1;
	let t10;
	let t11;
	let h41;
	let t12;
	let t13;
	let div2;
	let input2;
	let t14;
	let label2;
	let t15;
	let t16;
	let div3;
	let input3;
	let t17;
	let label3;
	let t18;
	let t19;
	let hr;
	let t20;
	let t21;
	let t22;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*id*/ ctx[0] && /*id*/ ctx[0] !== "" && create_if_block_3(ctx);

	function select_block_type(ctx, dirty) {
		if (/*id*/ ctx[0] && /*id*/ ctx[0] !== "") return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = /*id*/ ctx[0] && /*id*/ ctx[0] !== "" && create_if_block_1(ctx);
	let each_value = /*listings*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block3 = /*id*/ ctx[0] && /*id*/ ctx[0] !== "" && create_if_block(ctx);

	const block = {
		c: function create() {
			div6 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			div5 = element("div");
			a = element("a");
			t2 = text("Filter ");
			i = element("i");
			t3 = space();
			div4 = element("div");
			h40 = element("h4");
			t4 = text("Listing Types");
			t5 = space();
			div0 = element("div");
			input0 = element("input");
			t6 = space();
			label0 = element("label");
			t7 = text("Public");
			t8 = space();
			div1 = element("div");
			input1 = element("input");
			t9 = space();
			label1 = element("label");
			t10 = text("Completed");
			t11 = space();
			h41 = element("h4");
			t12 = text("Property Types");
			t13 = space();
			div2 = element("div");
			input2 = element("input");
			t14 = space();
			label2 = element("label");
			t15 = text("Apartments");
			t16 = space();
			div3 = element("div");
			input3 = element("input");
			t17 = space();
			label3 = element("label");
			t18 = text("Landed");
			t19 = space();
			hr = element("hr");
			t20 = space();
			if (if_block2) if_block2.c();
			t21 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t22 = space();
			if (if_block3) if_block3.c();
			this.h();
		},
		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			if (if_block0) if_block0.l(div6_nodes);
			t0 = claim_space(div6_nodes);
			if_block1.l(div6_nodes);
			t1 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { id: true, class: true });
			var div5_nodes = children(div5);

			a = claim_element(div5_nodes, "A", {
				"data-bs-toggle": true,
				href: true,
				role: true,
				"aria-expanded": true,
				"aria-controls": true,
				class: true
			});

			var a_nodes = children(a);
			t2 = claim_text(a_nodes, "Filter ");
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { id: true, class: true });
			var div4_nodes = children(div4);
			h40 = claim_element(div4_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			t4 = claim_text(h40_nodes, "Listing Types");
			h40_nodes.forEach(detach_dev);
			t5 = claim_space(div4_nodes);
			div0 = claim_element(div4_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			input0 = claim_element(div0_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				id: true
			});

			t6 = claim_space(div0_nodes);
			label0 = claim_element(div0_nodes, "LABEL", { class: true, for: true });
			var label0_nodes = children(label0);
			t7 = claim_text(label0_nodes, "Public");
			label0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t8 = claim_space(div4_nodes);
			div1 = claim_element(div4_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			input1 = claim_element(div1_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				id: true
			});

			t9 = claim_space(div1_nodes);
			label1 = claim_element(div1_nodes, "LABEL", { class: true, for: true });
			var label1_nodes = children(label1);
			t10 = claim_text(label1_nodes, "Completed");
			label1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t11 = claim_space(div4_nodes);
			h41 = claim_element(div4_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t12 = claim_text(h41_nodes, "Property Types");
			h41_nodes.forEach(detach_dev);
			t13 = claim_space(div4_nodes);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			input2 = claim_element(div2_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				id: true
			});

			t14 = claim_space(div2_nodes);
			label2 = claim_element(div2_nodes, "LABEL", { class: true, for: true });
			var label2_nodes = children(label2);
			t15 = claim_text(label2_nodes, "Apartments");
			label2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t16 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			input3 = claim_element(div3_nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				id: true
			});

			t17 = claim_space(div3_nodes);
			label3 = claim_element(div3_nodes, "LABEL", { class: true, for: true });
			var label3_nodes = children(label3);
			t18 = claim_text(label3_nodes, "Landed");
			label3_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t19 = claim_space(div4_nodes);
			hr = claim_element(div4_nodes, "HR", { class: true });
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t20 = claim_space(div6_nodes);
			if (if_block2) if_block2.l(div6_nodes);
			t21 = claim_space(div6_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div6_nodes);
			}

			t22 = claim_space(div6_nodes);
			if (if_block3) if_block3.l(div6_nodes);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "bi bi-caret-down-fill");
			add_location(i, file, 33, 19, 770);
			attr_dev(a, "data-bs-toggle", "collapse");
			attr_dev(a, "href", "#filter-options");
			attr_dev(a, "role", "button");
			attr_dev(a, "aria-expanded", "false");
			attr_dev(a, "aria-controls", "filter-options");
			attr_dev(a, "class", "expander svelte-1o6e2u4");
			add_location(a, file, 25, 8, 533);
			attr_dev(h40, "class", "svelte-1o6e2u4");
			add_location(h40, file, 36, 12, 882);
			attr_dev(input0, "class", "form-check-input svelte-1o6e2u4");
			attr_dev(input0, "type", "checkbox");
			input0.__value = "";
			input0.value = input0.__value;
			attr_dev(input0, "id", "flexCheckDefault");
			add_location(input0, file, 38, 16, 958);
			attr_dev(label0, "class", "form-check-label svelte-1o6e2u4");
			attr_dev(label0, "for", "flexCheckDefault");
			add_location(label0, file, 45, 16, 1198);
			attr_dev(div0, "class", "form-check");
			add_location(div0, file, 37, 12, 917);
			attr_dev(input1, "class", "form-check-input svelte-1o6e2u4");
			attr_dev(input1, "type", "checkbox");
			input1.__value = "";
			input1.value = input1.__value;
			attr_dev(input1, "id", "flexCheckChecked");
			add_location(input1, file, 50, 16, 1378);
			attr_dev(label1, "class", "form-check-label svelte-1o6e2u4");
			attr_dev(label1, "for", "flexCheckChecked");
			add_location(label1, file, 57, 16, 1621);
			attr_dev(div1, "class", "form-check");
			add_location(div1, file, 49, 12, 1337);
			attr_dev(h41, "class", "svelte-1o6e2u4");
			add_location(h41, file, 61, 12, 1763);
			attr_dev(input2, "class", "form-check-input svelte-1o6e2u4");
			attr_dev(input2, "type", "checkbox");
			input2.__value = "";
			input2.value = input2.__value;
			attr_dev(input2, "id", "flexCheckDefault");
			add_location(input2, file, 63, 16, 1840);
			attr_dev(label2, "class", "form-check-label svelte-1o6e2u4");
			attr_dev(label2, "for", "flexCheckDefault");
			add_location(label2, file, 70, 16, 2084);
			attr_dev(div2, "class", "form-check");
			add_location(div2, file, 62, 12, 1799);
			attr_dev(input3, "class", "form-check-input svelte-1o6e2u4");
			attr_dev(input3, "type", "checkbox");
			input3.__value = "";
			input3.value = input3.__value;
			attr_dev(input3, "id", "flexCheckChecked");
			add_location(input3, file, 75, 16, 2268);
			attr_dev(label3, "class", "form-check-label svelte-1o6e2u4");
			attr_dev(label3, "for", "flexCheckChecked");
			add_location(label3, file, 82, 16, 2508);
			attr_dev(div3, "class", "form-check");
			add_location(div3, file, 74, 12, 2227);
			attr_dev(hr, "class", "svelte-1o6e2u4");
			add_location(hr, file, 86, 12, 2647);
			attr_dev(div4, "id", "filter-options");
			attr_dev(div4, "class", "collapse svelte-1o6e2u4");
			add_location(div4, file, 35, 8, 827);
			attr_dev(div5, "id", "filters-box");
			attr_dev(div5, "class", "svelte-1o6e2u4");
			add_location(div5, file, 24, 4, 502);
			attr_dev(div6, "class", "container svelte-1o6e2u4");
			add_location(div6, file, 12, 0, 284);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div6, anchor);
			if (if_block0) if_block0.m(div6, null);
			append_dev(div6, t0);
			if_block1.m(div6, null);
			append_dev(div6, t1);
			append_dev(div6, div5);
			append_dev(div5, a);
			append_dev(a, t2);
			append_dev(a, i);
			append_dev(div5, t3);
			append_dev(div5, div4);
			append_dev(div4, h40);
			append_dev(h40, t4);
			append_dev(div4, t5);
			append_dev(div4, div0);
			append_dev(div0, input0);
			input0.checked = /*showPublic*/ ctx[2];
			append_dev(div0, t6);
			append_dev(div0, label0);
			append_dev(label0, t7);
			append_dev(div4, t8);
			append_dev(div4, div1);
			append_dev(div1, input1);
			input1.checked = /*showCompleted*/ ctx[3];
			append_dev(div1, t9);
			append_dev(div1, label1);
			append_dev(label1, t10);
			append_dev(div4, t11);
			append_dev(div4, h41);
			append_dev(h41, t12);
			append_dev(div4, t13);
			append_dev(div4, div2);
			append_dev(div2, input2);
			input2.checked = /*showApartments*/ ctx[4];
			append_dev(div2, t14);
			append_dev(div2, label2);
			append_dev(label2, t15);
			append_dev(div4, t16);
			append_dev(div4, div3);
			append_dev(div3, input3);
			input3.checked = /*showLanded*/ ctx[5];
			append_dev(div3, t17);
			append_dev(div3, label3);
			append_dev(label3, t18);
			append_dev(div4, t19);
			append_dev(div4, hr);
			append_dev(div6, t20);
			if (if_block2) if_block2.m(div6, null);
			append_dev(div6, t21);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div6, null);
			}

			append_dev(div6, t22);
			if (if_block3) if_block3.m(div6, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", /*input0_change_handler*/ ctx[6]),
					listen_dev(input1, "change", /*input1_change_handler*/ ctx[7]),
					listen_dev(input2, "change", /*input2_change_handler*/ ctx[8]),
					listen_dev(input3, "change", /*input3_change_handler*/ ctx[9])
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*id*/ ctx[0] && /*id*/ ctx[0] !== "") {
				if (if_block0) {
					if (dirty & /*id*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div6, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div6, t1);
				}
			}

			if (dirty & /*showPublic*/ 4) {
				input0.checked = /*showPublic*/ ctx[2];
			}

			if (dirty & /*showCompleted*/ 8) {
				input1.checked = /*showCompleted*/ ctx[3];
			}

			if (dirty & /*showApartments*/ 16) {
				input2.checked = /*showApartments*/ ctx[4];
			}

			if (dirty & /*showLanded*/ 32) {
				input3.checked = /*showLanded*/ ctx[5];
			}

			if (/*id*/ ctx[0] && /*id*/ ctx[0] !== "") {
				if (if_block2) ; else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(div6, t21);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*id, listings*/ 3) {
				each_value = /*listings*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div6, t22);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*id*/ ctx[0] && /*id*/ ctx[0] !== "") {
				if (if_block3) ; else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					if_block3.m(div6, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div6);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
			destroy_each(each_blocks, detaching);
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Listings", slots, []);
	let { id } = $$props;
	let { listings = [] } = $$props;
	let showPublic = true;
	let showCompleted = false;
	let showApartments = true;
	let showLanded = true;
	const writable_props = ["id", "listings"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Listings> was created with unknown prop '${key}'`);
	});

	function input0_change_handler() {
		showPublic = this.checked;
		$$invalidate(2, showPublic);
	}

	function input1_change_handler() {
		showCompleted = this.checked;
		$$invalidate(3, showCompleted);
	}

	function input2_change_handler() {
		showApartments = this.checked;
		$$invalidate(4, showApartments);
	}

	function input3_change_handler() {
		showLanded = this.checked;
		$$invalidate(5, showLanded);
	}

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listings" in $$props) $$invalidate(1, listings = $$props.listings);
	};

	$$self.$capture_state = () => ({
		ListingLI: ListingLI_1,
		AddListing,
		id,
		listings,
		showPublic,
		showCompleted,
		showApartments,
		showLanded
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listings" in $$props) $$invalidate(1, listings = $$props.listings);
		if ("showPublic" in $$props) $$invalidate(2, showPublic = $$props.showPublic);
		if ("showCompleted" in $$props) $$invalidate(3, showCompleted = $$props.showCompleted);
		if ("showApartments" in $$props) $$invalidate(4, showApartments = $$props.showApartments);
		if ("showLanded" in $$props) $$invalidate(5, showLanded = $$props.showLanded);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		id,
		listings,
		showPublic,
		showCompleted,
		showApartments,
		showLanded,
		input0_change_handler,
		input1_change_handler,
		input2_change_handler,
		input3_change_handler
	];
}

class Listings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { id: 0, listings: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Listings",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<Listings> was created without expected prop 'id'");
		}
	}

	get id() {
		throw new Error("<Listings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Listings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listings() {
		throw new Error("<Listings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listings(value) {
		throw new Error("<Listings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Listings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdGluZ3MuYTJlY2UyOTUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvTGlzdGluZ3Muc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IExpc3RpbmdMSSBmcm9tIFwiLi9MaXN0aW5nTEkuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEFkZExpc3RpbmcgZnJvbSBcIi4vQWRkTGlzdGluZy5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgaWQ7XG4gICAgZXhwb3J0IGxldCBsaXN0aW5ncyA9IFtdO1xuICAgIGxldCBzaG93UHVibGljID0gdHJ1ZTtcbiAgICBsZXQgc2hvd0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgIGxldCBzaG93QXBhcnRtZW50cyA9IHRydWU7XG4gICAgbGV0IHNob3dMYW5kZWQgPSB0cnVlO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICA8IS0tIFRFTVAgLS0+XG4gICAgeyNpZiBpZCAmJiBpZCAhPT0gXCJcIn1cbiAgICAgICAgPEFkZExpc3RpbmcgLz5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiBpZCAmJiBpZCAhPT0gXCJcIn1cbiAgICAgICAgPGgxPkFsbCBMaXN0aW5nczwvaDE+XG4gICAgezplbHNlfVxuICAgICAgICA8aDE+UHVibGljIExpc3RpbmdzPC9oMT5cbiAgICB7L2lmfVxuXG4gICAgPGRpdiBpZD1cImZpbHRlcnMtYm94XCI+XG4gICAgICAgIDxhXG4gICAgICAgICAgICBkYXRhLWJzLXRvZ2dsZT1cImNvbGxhcHNlXCJcbiAgICAgICAgICAgIGhyZWY9XCIjZmlsdGVyLW9wdGlvbnNcIlxuICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuICAgICAgICAgICAgYXJpYS1jb250cm9scz1cImZpbHRlci1vcHRpb25zXCJcbiAgICAgICAgICAgIGNsYXNzPVwiZXhwYW5kZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgICBGaWx0ZXIgPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGxcIiAvPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxkaXYgaWQ9XCJmaWx0ZXItb3B0aW9uc1wiIGNsYXNzPVwiY29sbGFwc2VcIj5cbiAgICAgICAgICAgIDxoND5MaXN0aW5nIFR5cGVzPC9oND5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJmbGV4Q2hlY2tEZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgYmluZDpjaGVja2VkPXtzaG93UHVibGljfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImZsZXhDaGVja0RlZmF1bHRcIj5cbiAgICAgICAgICAgICAgICAgICAgUHVibGljXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxuICAgICAgICAgICAgICAgICAgICBpZD1cImZsZXhDaGVja0NoZWNrZWRcIlxuICAgICAgICAgICAgICAgICAgICBiaW5kOmNoZWNrZWQ9e3Nob3dDb21wbGV0ZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiZmxleENoZWNrQ2hlY2tlZFwiPlxuICAgICAgICAgICAgICAgICAgICBDb21wbGV0ZWRcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8aDQ+UHJvcGVydHkgVHlwZXM8L2g0PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxuICAgICAgICAgICAgICAgICAgICBpZD1cImZsZXhDaGVja0RlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICBiaW5kOmNoZWNrZWQ9e3Nob3dBcGFydG1lbnRzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImZsZXhDaGVja0RlZmF1bHRcIj5cbiAgICAgICAgICAgICAgICAgICAgQXBhcnRtZW50c1xuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJmbGV4Q2hlY2tDaGVja2VkXCJcbiAgICAgICAgICAgICAgICAgICAgYmluZDpjaGVja2VkPXtzaG93TGFuZGVkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cImZsZXhDaGVja0NoZWNrZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgTGFuZGVkXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgeyNpZiBpZCAmJiBpZCAhPT0gXCJcIn1cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0yXCIgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtN1wiIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTNcIj5cbiAgICAgICAgICAgICAgICA8dWwgaWQ9XCJjaGVja2JveC1oZWFkZXJzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5QdWJsaWM8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+Q29tcGxldGU8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+Q2hlY2s8L2xpPlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cblxuICAgIHsjZWFjaCBsaXN0aW5ncyBhcyBsfVxuICAgICAgICA8TGlzdGluZ0xJIHtpZH0gbGlzdGluZz17bH0gLz5cbiAgICB7L2VhY2h9XG5cbiAgICB7I2lmIGlkICYmIGlkICE9PSBcIlwifVxuICAgICAgICA8YnV0dG9uPlVwZGF0ZSBMaXN0aW5nczwvYnV0dG9uPlxuICAgIHsvaWZ9XG48L2Rpdj5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5cbiAgICBAaW1wb3J0IFwiLi9zdHlsZXMvX2FsbFwiO1xuXG4gICAgZGl2LmNvbnRhaW5lciB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDRyZW07XG4gICAgfVxuXG4gICAgYS5leHBhbmRlciB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAkYm9keS1mb250O1xuICAgICAgICBmb250LXNpemU6IHgtbGFyZ2U7XG4gICAgfVxuXG4gICAgYS5leHBhbmRlcjpob3ZlciB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG5cbiAgICAjZmlsdGVycy1ib3gge1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIH1cblxuICAgICNmaWx0ZXItb3B0aW9ucyB7XG4gICAgICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtIDFyZW0gMXJlbTtcbiAgICB9XG5cbiAgICBoNCB7XG4gICAgICAgIG1hcmdpbjogMC43NXJlbSBhdXRvO1xuICAgIH1cblxuICAgICNjaGVja2JveC1oZWFkZXJzIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICRib2R5LWZvbnQ7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGxpIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMS4ycmVtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYnV0dG9uIHtcbiAgICAgICAgZm9udC1zaXplOiB4LWxhcmdlO1xuICAgIH1cbjwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkF5R2lDLEdBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUVBQUQsR0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQTNGekIsR0FBRSxjQUFJLEdBQUUsUUFBSyxFQUFFOzs7YUFJZixHQUFFLGNBQUksR0FBRSxRQUFLLEVBQUU7Ozs7Ozt3QkF3RWYsR0FBRSxjQUFJLEdBQUUsUUFBSyxFQUFFOytCQWNiLEdBQVE7Ozs7Z0NBQWIsTUFBSTs7Ozs7Ozs7d0JBSUQsR0FBRSxjQUFJLEdBQUUsUUFBSyxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQWpFVSxHQUFVOzs7Ozs7O3NDQVlWLEdBQWE7Ozs7Ozs7Ozs7dUNBYWIsR0FBYzs7Ozs7OzttQ0FZZCxHQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Y0FsRW5DLEdBQUUsY0FBSSxHQUFFLFFBQUssRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBNkJVLEdBQVU7Ozs7dUNBWVYsR0FBYTs7Ozt3Q0FhYixHQUFjOzs7O29DQVlkLEdBQVU7OztjQVVuQyxHQUFFLGNBQUksR0FBRSxRQUFLLEVBQUU7Ozs7Ozs7Ozs7Ozs4QkFjYixHQUFROzs7OytCQUFiLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7OztjQUlELEdBQUUsY0FBSSxHQUFFLFFBQUssRUFBRTs7Ozs7Ozs7Ozs7Ozs7O2tDQUpsQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FwR0ssRUFBRTtPQUNGLFFBQVE7S0FDZixVQUFVLEdBQUcsSUFBSTtLQUNqQixhQUFhLEdBQUcsS0FBSztLQUNyQixjQUFjLEdBQUcsSUFBSTtLQUNyQixVQUFVLEdBQUcsSUFBSTs7Ozs7Ozs7RUFrQ1MsVUFBVTs7Ozs7RUFZVixhQUFhOzs7OztFQWFiLGNBQWM7Ozs7O0VBWWQsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
