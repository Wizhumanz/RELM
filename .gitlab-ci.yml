stages:
  - build
  - test
  - deploy

variables:
  FRONTEND_IMAGE: node:lts-alpine3.13
  API_IMAGE: golang:1.15
  GCLOUD_PROJECT_ID: myika-relm

# FRONTEND

# only checks if app builds, build product not used for deployment
frontend-build:
  stage: build
  only:
    - /frontend-.*/
  image: $FRONTEND_IMAGE
  script:
    - cd frontend
    - npm install
    - npm run-script build

frontend-unit-test:
  stage: test
  only:
    - /frontend-.*/
  image: $FRONTEND_IMAGE
  script:
    - cd frontend
    - npm run test

# frontend-push-image:
#   stage: push
#   only:
#     - master
#   image: docker
#   services:
#     - docker:dind
#   script:
#     - cd frontend
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE:latest .
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
#     - docker push $CI_REGISTRY_IMAGE:latest
#   after_script:
#     - docker logout registry.gitlab.com

# GOLANG API

api-build:
  stage: build
  only:
    - /api-.*/
  image: $API_IMAGE
  script:
    - cd api
    - go build

api-unit-test:
  stage: test
  only:
    - /api-.*/
  image: $API_IMAGE
  script:
    - cd api
    - go test

api-deploy:
  stage: deploy
  # only:
  #   - production
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
  script:
    - gcloud auth activate-service-account --key-file=$GCLOUD_KEY
    - gcloud config set project $GCLOUD_PROJECT_ID
    - gcloud builds submit --tag gcr.io/$GCLOUD_PROJECT_ID/api-$CI_COMMIT_SHORT_SHA
    - gcloud beta run deploy relm-api \
      --image gcr.io/$GCLOUD_PROJECT_ID/api-$CI_COMMIT_SHORT_SHA \
      --port 8000 \
      --platform managed \
      --min-instances 0 \
      --max-instances 3 \
      --allow-unauthenticated \
      --region asia-southeast1 \
      --memory 128Mi \
      --cpu 1 \
      --timeout 1000 \
      --concurrency 5


